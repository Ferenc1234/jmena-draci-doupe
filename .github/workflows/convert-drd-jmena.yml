name: Convert DRD Names

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      encoding:
        description: 'Force specific encoding (cp852, cp1250, or iso-8859-2). Leave empty for auto-detection.'
        required: false
        type: string
      zip_path:
        description: 'Path to ZIP file containing DBF files'
        required: false
        default: 'jmena(1).zip'
        type: string

jobs:
  convert:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dbfread openpyxl pandas chardet
    
    - name: Set conversion parameters
      run: |
        # Set ZIP_PATH with fallback for non-dispatch triggers
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ZIP_PATH="${{ inputs.zip_path || 'jmena(1).zip' }}"
        else
          ZIP_PATH="jmena(1).zip"
        fi
        echo "ZIP_PATH=${ZIP_PATH}" >> $GITHUB_ENV
        
        # Set ENCODING_ARG (only if non-empty)
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.encoding }}" ]; then
          ENCODING_ARG="--encoding ${{ inputs.encoding }}"
          echo "ENCODING_OVERRIDE=true" >> $GITHUB_ENV
        else
          ENCODING_ARG=""
          echo "ENCODING_OVERRIDE=false" >> $GITHUB_ENV
        fi
        echo "ENCODING_ARG=${ENCODING_ARG}" >> $GITHUB_ENV
        
        # Log the chosen settings for clarity
        echo "=== Conversion Settings ==="
        echo "ZIP_PATH: ${ZIP_PATH}"
        echo "ENCODING_OVERRIDE: ${ENCODING_OVERRIDE:-false}"
        if [ "${ENCODING_OVERRIDE}" = "true" ]; then
          echo "FORCED_ENCODING: ${{ inputs.encoding }}"
        else
          echo "ENCODING: auto-detection"
        fi
        echo "=========================="
    
    - name: Check if ZIP file exists
      run: |
        if [ ! -f "$ZIP_PATH" ]; then
          echo "Error: ZIP file $ZIP_PATH not found"
          exit 1
        fi
        echo "Found ZIP file: $ZIP_PATH"
    
    - name: Convert DBF files
      run: |
        python convert_drd_names.py "$ZIP_PATH" --output-dir output $ENCODING_ARG
    
    - name: Create output ZIP archive
      run: |
        if [ -d "output" ] && [ "$(ls -A output)" ]; then
          cd output
          zip -r ../drd-jmena-export.zip .
          cd ..
          echo "Created drd-jmena-export.zip with contents:"
          unzip -l drd-jmena-export.zip
        else
          echo "Error: No output files generated"
          exit 1
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: drd-jmena-export
        path: drd-jmena-export.zip
        retention-days: 30
        if-no-files-found: error
    
    - name: Commit and push generated outputs
      # Only commit on push to main branch or manual workflow dispatch
      # Skip if this is a PR or if commit message contains [skip-convert]
      if: |
        (github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '[skip-convert]')) ||
        (github.event_name == 'workflow_dispatch')
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated files
        git add output/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Create commit message
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            COMMIT_MSG="Convert DRD names (manual dispatch"
            if [ "$ENCODING_OVERRIDE" = "true" ]; then
              COMMIT_MSG="$COMMIT_MSG, encoding: ${{ inputs.encoding }}"
            fi
            if [ "$ZIP_PATH" != "jmena(1).zip" ]; then
              COMMIT_MSG="$COMMIT_MSG, zip: $ZIP_PATH"
            fi
            COMMIT_MSG="$COMMIT_MSG) [skip-convert]"
          else
            COMMIT_MSG="Convert DRD names [skip-convert]"
          fi
          
          # Commit and push
          git commit -m "$COMMIT_MSG"
          git push
        fi
